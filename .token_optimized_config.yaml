# Token-Optimized Agent Configuration
# Ensures maximum token efficiency through automatic agent chaining

agent_pipeline:
  # Always use token-sage as primary analyzer
  primary_agent: "token-sage"

  # Always use HAL agents for preprocessing (0 tokens)
  preprocessing_agents:
    - "hal_token_savvy_agent"
    - "hal_agent_loop"

# Token optimization settings
optimization:
  # Local filtering limits (saves tokens)
  max_context_chars: 1000
  max_files: 50
  max_bytes: 50000

  # Always enable caching
  cache_enabled: true
  delta_mode: true

  # Always use path abbreviation
  abbreviate_paths: true

  # Minimal context lines
  context_lines: 1

# File patterns for analysis
include_patterns:
  - "*.py"
  - "*.md"
  - "*.yaml"
  - "*.yml"
  - "*.json"

# Caching configuration
cache:
  directory: "~/.token_optimized_cache"
  ttl: 86400  # 24 hours

# Usage examples
examples:
  - command: "python token_optimized_agent.py 'authentication system'"
    description: "Analyze authentication code with max token efficiency"
  - command: "python token_optimized_agent.py 'database models' 'class.*Model'"
    description: "Find database model classes with token optimization"
  - command: "python token_optimized_agent.py 'API endpoints' 'def.*route'"
    description: "Analyze API routes with local preprocessing"
