"""
This module contains the SQLAlchemy models for the ToDoWrite database.
"""

from sqlalchemy import (
    Column,
    DateTime,
    Float,
    ForeignKey,
    Integer,
    String,
    Table,
    Text,
)
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()


class Node(Base):
    """Represents a node in the ToDoWrite system."""

    __tablename__ = "nodes"

    id = Column(String, primary_key=True)
    layer = Column(String, nullable=False)
    title = Column(String, nullable=False)
    description = Column(Text)
    status = Column(String, default="planned")
    owner = Column(String)
    severity = Column(String)
    work_type = Column(String)

    labels = relationship("Label", secondary="node_labels", back_populates="nodes")
    command = relationship("Command", uselist=False, back_populates="node")


class Link(Base):
    """Represents a link between two nodes."""

    __tablename__ = "links"

    parent_id = Column(String, ForeignKey("nodes.id"), primary_key=True)
    child_id = Column(String, ForeignKey("nodes.id"), primary_key=True)


class Label(Base):
    """Represents a label that can be attached to a node."""

    __tablename__ = "labels"

    label = Column(String, primary_key=True)

    nodes = relationship("Node", secondary="node_labels", back_populates="labels")


node_labels = Table(
    "node_labels",
    Base.metadata,
    Column("node_id", String, ForeignKey("nodes.id"), primary_key=True),
    Column("label", String, ForeignKey("labels.label"), primary_key=True),
)


class Command(Base):
    """Represents a command to be executed."""

    __tablename__ = "commands"

    node_id = Column(String, ForeignKey("nodes.id"), primary_key=True)
    ac_ref = Column(String)
    run = Column(Text)

    node = relationship("Node", back_populates="command")
    artifacts = relationship("Artifact", back_populates="command")


class Artifact(Base):
    """Represents an artifact generated by a command."""

    __tablename__ = "artifacts"

    artifact = Column(String, primary_key=True)
    command_id = Column(String, ForeignKey("commands.node_id"), primary_key=True)

    command = relationship("Command", back_populates="artifacts")
