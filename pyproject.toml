[project]
name = "todowrite"
version = "0.1.7.0"
description = "A standalone task management system with hierarchical planning framework."
authors = [
    { name = "dderyldowney", email = "dderyldowney@gmail.com" }
]
requires-python = ">=3.12"
dependencies = [
    "sqlalchemy>=2.0.0",
    "typing-extensions>=4.0.0",
    "click>=8.0.0",
    "psycopg2-binary>=2.9.0",
    "PyYAML>=6.0.0",
    "jsonschema>=4.0.0",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["todowrite*"]

[tool.setuptools.package-data]
todowrite = ["schemas/*.json"]

[project.scripts]
todowrite = "todowrite.cli:cli"

[project.optional-dependencies]
dev = [
    "mypy>=1.13.0",
    "types-PyYAML>=6.0.12",
    "types-jsonschema>=4.0.0",
    "sqlalchemy[mypy]>=2.0.0",
    "types-click>=7.1.0",
    "ruff>=0.7.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "pytest>=8.0.0",
    "pre-commit>=4.0.0",
    "bandit[toml]>=1.7.0",
]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
# plugins = ["sqlalchemy.ext.mypy.plugin"]  # Disabled due to pre-commit environment issues

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "click.*",
    "sqlalchemy.*",
    "jsonschema.*",
    "yaml.*"
]
ignore_missing_imports = true

# Skip CLI module due to Click decorator typing complexity
[[tool.mypy.overrides]]
module = "todowrite.cli"
ignore_errors = true

# Allow Any for SQLAlchemy base classes
[[tool.mypy.overrides]]
module = "todowrite.db.models"
disallow_subclassing_any = false

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    ".venv",
    "venv",
    "results",
    "trace",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "S101",  # assert used (acceptable in tests)
    "T20",   # print statements (needed for CLI output)
    "S110",  # try-except-pass (acceptable for graceful degradation)
    "S602",  # subprocess with shell=True (needed for command execution)
    "S603",  # subprocess call (needed for tool integration)
    "S607",  # subprocess with partial executable path (needed for docker commands)
    "PTH103", # os.makedirs (acceptable for compatibility)
    "PTH120", # os.path.dirname (acceptable for compatibility)
    "PTH123", # open() (acceptable for compatibility)
    "F823",  # local variable referenced before assignment (false positive with TYPE_CHECKING)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]  # Allow asserts and unused args in tests

# Black configuration
[tool.black]
target-version = ["py312"]
line-length = 88
skip-string-normalization = false
skip-magic-trailing-comma = false

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["todowrite"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B110", "B404", "B602", "B603", "B607"]  # Skip acceptable security warnings for CLI tool
